#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
use autodie;
use DBI;
use File::Path qw/make_path/;
use File::Copy qw/copy/;
use File::Basename qw/basename/;

my %files = (
    bin               => ['ilbot2.pl', 'util/cron-graphs.pl'],
    www               => ['ilbot.fcgi', 'ilbot.psgi'],
    'static/s'        => ['static/s/*'],
    'config/template' => ['config/template/*.tmpl'],
);

say 'Checking dependencies';

my $missing = 0;
sub requires {
    my ($module, $version) = @_;
    my $str = $version ? "use $module $version;" : "use $module;";
    eval $str;
    if ($@) {
        say "Missing dependency: Module $module",
            ($version ? " Version $version" : "");
        $missing++;
    }
}
die "Missing file 'cpanfile'" unless -e 'cpanfile';
do 'cpanfile';
if ($missing) {
    die "$missing missing dependencies; please install them, and then try running $0 again\n";
}
say '... dependencies all OK';

sub prompt {
    my ($text, $default) = @_;
    if (defined $default && length $default) {
        $text .= " [$default]";
    }
    $| = 1;
    print "$text> ";
    my $answer = <>;
    chomp $answer;
    return $answer || $default;
}

print <<EOT;
Database Access
===============
You need a mysql database where ilbot stores the logs.
For installation you need privileges for creating tables and indxes.
For running ilbot, you need INSERT, SELECT and UPDATE privileges.
EOT
my $host   = prompt('Database host', 'localhost');
my $port   = prompt('Database port', 3306);
my $dbname = prompt('Database name', 'ilbot');
my $dbuser = prompt('Database username', 'ilbot');
my $dbpass = prompt('Database password');

say "Now testing your database connection...";
my $dbh = DBI->connect("DBI:mysql:database=$dbname;host=$host;port=$port", $dbuser, $dbpass, { RaiseError => 1, PrintError => 0 });
$dbh->do('SELECT 1');

my $has_table_irclog = eval { $dbh->do('SELECT 1 FROM irclog LIMIT 1'); 1 };
if ($has_table_irclog) {
    print <<EOT
The database $dbname already has a table named 'irclog'. I'm going to use
this table, and assume that it already has the right structure. If not,
either abort this installer with Ctrl-C and run it again with a different
database, or drop the table and create it again from the schema in file
'sql/schema.mysql'
EOT
}
else {
    say "Database connection is fine, creating the schema for you...";
    eval {
        open my $SCHEMA, '<', 'sql/schema.mysql';
        local $/ = '';
        while (<$SCHEMA>) {
            $dbh->do($_);
        }
    };
    if ($@) {
        die "Schema creation failed: $@\n";
    }
    else {
        say "Created that schema for you.";
    }
}
$dbh->disconnect;

print <<EOT;
Time Zone
=========
You can either log and display the logs all in UTC/GMT, or
in whatever timezone your computer considers "local time".
Please enter either 'gmt' or 'local' below:
EOT

my $tz = prompt('Timezone', 'gmt');

print <<EOT;

Installation Path
=================
The installation path must
 + be writable by you (and potentially cron jobs)
 + be readable by Apache (if you use Apache for the web frontend)
 + not yet exist
EOT

my $path = prompt('Installation path', $ENV{HOME} . '/ilbot');
die "No installation path given, aborting\n" unless $path;

die "$path already exists" if -e $path;

make_path $path;
make_path "$path/config";

my $backend_conf = "$path/config/backend.conf";
open my $CONFIG, '>', $backend_conf;

print { $CONFIG } <<EOC;
# Database connectivity
dsn      = mysql
database = $dbname
host     = $host
port     = $port
user     = $dbuser
password = $dbpass

# once stuff works as it should, set this to 1
use_cache = 0

# Timezone
# Options:
#       * 'local' for server's timezone
#       * 'gmt' for UTC
timezone = $tz
EOC

close $CONFIG;
say "Written config to $backend_conf";

sub copy_and_replace {
    my $replacement = "use lib '$path/lib'; use Ilbot::Config '$path/config';\n";
    my ($from, $to) = @_;
    unless (-f $from) {
        die "File '$from' seems to be missing.";
    }
    if (-T $from) {
        open my $IN,  '<:encoding(UTF-8)', $from;
        open my $OUT, '>:encoding(UTF-8)', $to;
        while (<$IN>) {
            s/^# TO BE REPLACED BY THE INSTALLER.*/$replacement/s;
            print $OUT $_;
        }
        close $IN;
        close $OUT;
        system('chmod', "--reference=$from", $to);
    }
    else {
        copy($from, $to);
    }
}

make_path "$path/static/s";
for my $dest (keys %files) {
    my $p = "$path/$dest";
    make_path $p unless -d $p;
    for my $file (grep -f, map glob, @{ $files{$dest} }) {
        copy_and_replace($file, "$p/" . basename($file));
    }
}
make_path "$path/$_" for glob 'lib/Ilbot/*/';
for my $f (map glob, 'lib/Ilbot/*.pm', 'lib/Ilbot/*/*.pm') {
    copy($f, "$path/$f") or die "Cannot copy $f to $path/$f: $!";
}
say "Files copied";

print <<EOT;

Webserver configuration
=======================
You can either deploy the web frontend with Apache 2 and fasgcgi,
or run a separate, Plack-compatiable HTTP server.
See http://plackperl.org/#servers if you take the latter rout.
EOT


my $use_apache = prompt('Use Apache 2', 'yes');

if ($use_apache =~ /^y/i) {
    print <<EOT;
What's the URL of the new ilbot instance?
(For example http://irclog.perlgeek.de/)
EOT
    my $url = prompt('URL');

    if ($url =~ qr{https?://([^/]+)(.*)}) {
        my ($domain, $base) = ($1, $2);
        open my $CONF, '>', "$path/config/www.conf";
        print $CONF <<EOC;
base_url    = $base
static_path = $path/static

# enable this if you want to rate limit the dynamic pages
# (in requests per hour per IP)
#throttle = 200
EOC
        close $CONF;

        open $CONF, '>', "$path/$domain.conf";
        print $CONF <<EOC;
<VirtualHost *:80>
        ServerName $domain
        FastCgiServer $path/www/ilbot.fcgi -processes 3
        Alias /s/ $path/static/s/
        Alias /   $path/www/ilbot.fcgi/

# other useful stuff; make sure that /var/log/apach2/$domain/ exists
# before enabling it:
#        CustomLog /var/log/apache2/$domain/access.log combined
#        ErrorLog /var/log/apache2/$domain/error.log
#
#        ServerSignature On

</VirtualHost>
EOC
        close $CONF;
        print <<EOT;
There's an initial apache config file in $path/$domain.conf.
Please edit it to your liking, and then enable it.
On Debian, you can do it with these commands (as root):
    \$ mv $path/$domain.conf /etc/apache2/sites-available/
    \$ a2ensite $domain.conf
    \$ service apache2 reload
EOT
    }
    else {
        say "I don't understand this URL; please configure Apache yourself";
    }
}
