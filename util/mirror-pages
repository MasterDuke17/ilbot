#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use File::Path qw/mkpath/;

use Ilbot::Config;
use Ilbot::Date qw/today/;
use Getopt::Long qw/GetOptions/;
GetOptions(
    'recreate!' => \my $Recreate,
    'verbose!'  => \my $Verbose,
) or die "Usage: $0 [--recreate] [--verbose]"; 
my $path = config('config_root') . '/d';
say "Using root $path" if $Verbose;
mkpath($path);

my $b = _backend();
my $f = _frontend();

use Data::Dumper;

for my $channel (@{ $b->channels }) {
    my $sanitized = Ilbot::Config::sanitize_channel_for_fs($channel);
    say "Working on channel '$channel', $path/$sanitized" if $Verbose;
    mkpath "$path/$sanitized";
    my $c = $b->channel(channel => $channel);
    my $days = $c->days_and_activity_counts();
    for my $d (@$days) {
        my $day = $d->[0];
        say "  Day $day" if $Verbose;
        my $p = "$path/$sanitized/$day";
        if (-e $p && -s $p && !$Recreate) {
            say "    ... file already exists" if $Verbose;
            next;
        }
        if ($day eq today()) {
            say "    ... is today, so not fetching yet" if $Verbose;
            next;
        }
        open my $OUT, '>:encoding(UTF-8)', $p
            or die "Cannot open '$p' for writing: $!";

        my $stripped_channel = $channel;
        $stripped_channel =~ s/^\#+//;
        print $OUT $f->day(
            channel => $stripped_channel,
            day     => $day,
        );

        close $OUT;
    }
}
