#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use lib 'lib';
use Config::File qw/read_config_file/;
use Data::Dumper;
use Encode qw/decode_utf8 encode_utf8/;
use List::Util qw/max/;
use JSON qw/encode_json decode_json/;
$Data::Dumper::Useqq = 1;
$| = 1;

my $pg_conf_file = shift(@ARGV) // 'config/postgresql.conf';
my $pg_config    = read_config_file $pg_conf_file;

use Ilbot::Config;
use DBI;

my $mysql_dbh = _backend->dbh();
$mysql_dbh->{mysql_enable_utf8} = 0;
my $pg_dbh    = Ilbot::Backend::SQL->new(config => $pg_config)->dbh();

my %arity = (
    ilbot_channel => 2,
    ilbot_day     => 4,
    ilbot_lines   => 7,
);

my $max_fn = 'mysql-pg-max-ids.json';
my %old_max;
if (open my $OLDMAX, '<:encoding(UTF-8)', $max_fn) {
    local $/;
    my $json = <$OLDMAX>;
    close $OLDMAX;
    %old_max = %{ decode_json $json };
}

my %max;

for my $table (qw/ilbot_channel ilbot_day ilbot_lines/) {
    my $max = $old_max{$table};
    say "$table... ";
    $pg_dbh->begin_work;
    my $where = $old_max{$table} ? "WHERE id > $old_max{$table}" : '';
    my $fetch = $mysql_dbh->prepare("SELECT * FROM $table $where ORDER BY id");
    my $ph    = join ', ', ('?') x $arity{$table};
    my $store = $pg_dbh->prepare("INSERT INTO $table VALUES ($ph)");

    $fetch->execute;
    my $c = 0;
    while (my @row = $fetch->fetchrow_array) {
        my $raw = $row[4];
        if (defined $max) {
            $max = max $max, $row[0];
        }
        else {
            $max = $row[0];
        }
        if ($table eq 'ilbot_lines') {
            $row[5] = $row[5] ? 'true' : 'false';
            $row[6] = $row[5] ? 'true' : 'false';
            $row[4] = decode_utf8( $row[4], sub  {encode_utf8 chr $_[0] });
            $row[4] = substr($row[4], 0, 512) if length($row[4]) > 512;
        }
        eval {
            $store->execute(@row);
        };
        if ($@) {
            warn $@;
            require Devel::Peek;
            print "Raw:\n";
            Devel::Peek::Dump $raw;
            print "Decoded:\n";
            Devel::Peek::Dump $row[4];
            exit;

        }
        ++$c;
        if ($c % 10_000 == 0) {
            $pg_dbh->commit;
            $pg_dbh->begin_work;
            print '.';
        }
    }
    $fetch->finish;
    $store->finish;
    $pg_dbh->commit;
    if (defined $max) {
        $max{$table} = $max;
        $max++;
        $pg_dbh->do("ALTER SEQUENCE ${table}_id_seq RESTART WITH $max");
    }
    say "\ndone $table!";
}

if (%max) {
    if (open my $NEW_MAX, '>:encoding(UTF-8)', $max_fn) {
        print $NEW_MAX encode_json(\%max);
        print $NEW_MAX "\n";
    }
    else {
        warn "Cannot open '$max_fn' for writing: $!";
    }
}
